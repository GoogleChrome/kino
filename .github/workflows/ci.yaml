# Copyright 2021 Google LLC
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
      - '!main'
      - '![0-9]+.[0-9]+'
  pull_request:
    types: [ closed ]
    branches:
      - 'main'
      - '[0-9]+.[0-9]+'

jobs:

  lint-js:
    name: Lint JS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        run: npm ci

      - name: Detect coding standard violations
        run: npm run lint

  release-tag:
    needs: [lint-js]
    if: ${{ github.event.pull_request.merged == true }}
    name: Release Tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set the tag version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Prepare Release
        id: prepare-release
        continue-on-error: true
        uses: derekherman/prepare-release@1.0
        with:
          baseRef: ${{ github.base_ref }}
          headRef: ${{ github.head_ref }}
          tagRef: ${{ steps.package-version.outputs.current-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        if: steps.prepare-release.outcome == 'success' && steps.prepare-release.conclusion == 'success'
        with:
          tag_name: ${{ steps.package-version.outputs.current-version }}
          release_name: ${{ steps.package-version.outputs.current-version }}
          body: |
            ${{ steps.prepare-release.outputs.changelog }}
            ${{ steps.prepare-release.outputs.props }}
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-b') || contains(github.ref, '-a') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [lint-js]
    name: Deploy Staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          expires: 30d
          projectId: "${{ secrets.FIREBASE_PROJECT_ID }}"
          channelId: staging

  deploy-production:
    if: ${{ github.event.pull_request.merged == true }}
    needs: [lint-js]
    name: Deploy Production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Configure npm cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Node dependencies
        run: npm ci

      - name: Build Assets
        run: npm run build

      - name: Deploy to Firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}"
          projectId: "${{ secrets.FIREBASE_PROJECT_ID }}"
          channelId: live
